import { useState, FormEvent, useEffect } from "react";
import { useAuth } from "../contexts/AuthContext";
import MainLayout from "../layouts/MainLayout";
import { doc, updateDoc, getDoc } from "firebase/firestore";
import { db } from "../firebase";
import { updateProfile } from "firebase/auth";
import StatusSelector, { getStatusColor } from "./status/StatusSelector";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { storage } from "../firebase";
import { useLocation } from "react-router-dom";

export default function Profile() {
  const { currentUser, username, userStatus } = useAuth();
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [newUsername, setNewUsername] = useState(username || "");
  const [bio, setBio] = useState("");
  const [showEmail, setShowEmail] = useState(false);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState({ text: "", type: "" });

  // New state variables for enhanced settings
  const [favoriteGenres, setFavoriteGenres] = useState<string[]>([]);
  const [notificationSettings, setNotificationSettings] = useState({
    messages: true,
    friendRequests: true,
    gameInvites: true,
    newsAndUpdates: false,
  });
  const [privacySettings, setPrivacySettings] = useState({
    showOnlineStatus: true,
    showCurrentGame: true,
    allowFriendRequests: true,
    showGameActivity: true,
  });
  const [activeTab, setActiveTab] = useState("profile");
  
  // Define tabs for the profile page
  const tabs = [
    { id: "profile", label: "Basic Info", icon: "fas fa-user" },
    { id: "settings", label: "Account Settings", icon: "fas fa-cog" },
    { id: "gaming", label: "Gaming Preferences", icon: "fas fa-gamepad" },
    { id: "privacy", label: "Privacy", icon: "fas fa-lock" },
    { id: "notifications", label: "Notifications", icon: "fas fa-bell" }
  ];

  // Get tab from URL if present
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const tabParam = queryParams.get('tab');

  useEffect(() => {
    // Set active tab based on URL parameter if it exists
    if (tabParam) {
      if (tabParam === 'settings') setActiveTab('settings');
      else if (tabParam === 'gaming') setActiveTab('gaming');
      else if (tabParam === 'privacy') setActiveTab('privacy');
      else if (tabParam === 'notifications') setActiveTab('notifications');
      else setActiveTab('profile');
    }
  }, [tabParam]);

  useEffect(() => {
    async function fetchUserProfile() {
      if (!currentUser) return;

      try {
        const userRef = doc(db, "users", currentUser.uid);
        const userDoc = await getDoc(userRef);

        if (userDoc.exists()) {
          const userData = userDoc.data();
          if (userData.bio) setBio(userData.bio);
          if (userData.showEmail !== undefined)
            setShowEmail(userData.showEmail);
          if (userData.profileImageUrl) setImageUrl(userData.profileImageUrl);

          // Load additional settings if they exist
          if (userData.favoriteGenres)
            setFavoriteGenres(userData.favoriteGenres);
          if (userData.notificationSettings)
            setNotificationSettings(userData.notificationSettings);
          if (userData.privacySettings)
            setPrivacySettings(userData.privacySettings);
        }
      } catch (error) {
        console.error("Error fetching user profile:", error);
      }
    }

    fetchUserProfile();
  }, [currentUser]);

  async function handleProfileUpdate(e: FormEvent) {
    e.preventDefault();

    if (!currentUser) return;

    try {
      setLoading(true);
      setMessage({ text: "", type: "" });
      let profileImageUrl = imageUrl;

      // Upload image if a new one was selected
      if (imageFile) {
        try {
          // Create a storage reference
          const filePath = `profile-images/${currentUser.uid}`;
          const storageRef = ref(storage, filePath);

          // Upload the file
          await uploadBytes(storageRef, imageFile);
          console.log("Uploaded a profile image!");

          // Get the download URL
          profileImageUrl = await getDownloadURL(storageRef);
        } catch (error) {
          console.error("Error uploading image:", error);
          throw new Error("Failed to upload image");
        }
      }

      /*----- Update Firestore document -----*/
      const userRef = doc(db, "users", currentUser.uid);
      await updateDoc(userRef, {
        username: newUsername,
        bio: bio,
        showEmail: showEmail,
        profileImageUrl: profileImageUrl,
        favoriteGenres: favoriteGenres,
        notificationSettings: notificationSettings,
        privacySettings: privacySettings,
        updatedAt: new Date().toISOString(),
      });

      /*----- Update Firebase Auth profile -----*/
      await updateProfile(currentUser, {
        displayName: newUsername,
        photoURL: profileImageUrl || undefined,
      });

      setMessage({
        text: "Profile updated successfully!",
        type: "success",
      });
      setIsEditing(false);
      setImageFile(null);
    } catch (error) {
      console.error("Error updating profile:", error);
      setMessage({
        text: "Failed to update profile. Please try again.",
        type: "error",
      });
    } finally {
      setLoading(false);
    }
  }

  // Handle image selection
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setImageFile(file);

      // Create a preview
      const reader = new FileReader();
      reader.onload = () => {
        setImageUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <MainLayout>
      <div className="container mx-auto px-4 sm:px-8 py-6 sm:py-8">
        <div className="bg-gray-900 rounded-lg overflow-hidden shadow-lg border border-gray-800">
          {/* Profile Header */}
          <div className="relative h-48 bg-gradient-to-r from-cyan-900/30 to-purple-900/30">
            <div className="absolute bottom-0 left-0 w-full p-6 bg-gradient-to-t from-gray-900 to-transparent">
              <div className="flex items-end space-x-4">
                <div className="relative">
                  <div className="w-24 h-24 rounded-full bg-gray-800 border-4 border-gray-800 overflow-hidden">
                    {imageUrl ? (
                      <img
                        src={imageUrl}
                        alt="Profile"
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-cyan-500 to-purple-600 text-white text-3xl font-bold">
                        {username?.charAt(0) || "U"}
                      </div>
                    )}
                    <div
                      className={`absolute bottom-0 right-0 w-4 h-4 rounded-full border-2 border-gray-800 ${getStatusColor(
                        userStatus
                      )}`}
                    ></div>
                  </div>
                </div>
                <div>
                  <h1 className="text-2xl font-bold text-white">{username}</h1>
                  <div className="flex items-center text-gray-400">
                    <span
                      className={`w-2 h-2 rounded-full ${getStatusColor(
                        userStatus
                      )} mr-2`}
                    ></span>
                    <span>{userStatus}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Tabs - Scrollable on mobile */}
          <div className="flex overflow-x-auto scrollbar-hide border-b border-gray-800">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                className={`px-4 sm:px-6 py-3 text-sm font-medium whitespace-nowrap ${
                  activeTab === tab.id
                    ? "text-cyan-400 border-b-2 border-cyan-400"
                    : "text-gray-400 hover:text-white"
                }`}
                onClick={() => setActiveTab(tab.id)}
              >
                {tab.icon && <i className={`${tab.icon} mr-2`}></i>}
                {tab.label}
              </button>
            ))}
            </div>
          </div>

          {/* Content Area */}
          <div className="p-6">
            {/* Success/Error Message */}
            {message.text && (
              <div
                className={`mb-4 p-3 rounded-lg ${
                  message.type === "success"
                    ? "bg-green-900/30 border border-green-800 text-green-400"
                    : "bg-red-900/30 border border-red-800 text-red-400"
                }`}
              >
                {message.text}
              </div>
            )}

            {/* Account Settings Tab */}
            {activeTab === "settings" && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-white mb-4">
                  Account Settings
                </h2>
                
                <div className="space-y-4">
                  {/* Account Security */}
                  <div className="bg-gray-800 rounded-lg p-4">
                    <h3 className="text-lg font-medium text-white mb-3">Account Security</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-gray-300 mb-2">Email Address</label>
                        <div className="flex items-center">
                          <input 
                            type="email" 
                            value={currentUser?.email || ""}
                            disabled
                            className="flex-1 bg-gray-700 border border-gray-600 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-cyan-500"
                          />
                          <button
                            type="button"
                            className="ml-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                          >
                            Change
                          </button>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-gray-300 mb-2">Password</label>
                        <button
                          type="button"
                          className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                        >
                          Change Password
                        </button>
                      </div>
                      
                      <div className="pt-2">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-medium text-white">Two-Factor Authentication</h4>
                            <p className="text-sm text-gray-400">Add an extra layer of security to your account</p>
                          </div>
                          <button
                            type="button"
                            className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                          >
                            Enable
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Account Preferences */}
                  <div className="bg-gray-800 rounded-lg p-4">
                    <h3 className="text-lg font-medium text-white mb-3">Account Preferences</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-gray-300 mb-2">Language</label>
                        <select className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-cyan-500">
                          <option value="en">English</option>
                          <option value="es">Spanish</option>
                          <option value="fr">French</option>
                          <option value="de">German</option>
                          <option value="ja">Japanese</option>
                        </select>
                      </div>
                      
                      <div>
                        <label className="block text-gray-300 mb-2">Time Zone</label>
                        <select className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-cyan-500">
                          <option value="utc">UTC</option>
                          <option value="est">Eastern Time (ET)</option>
                          <option value="cet">Central European Time (CET)</option>
                          <option value="pst">Pacific Time (PT)</option>
                        </select>
                      </div>
                      
                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="showEmail"
                          checked={showEmail}
                          onChange={(e) => setShowEmail(e.target.checked)}
                          className="w-4 h-4 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
                        />
                        <label
                          htmlFor="showEmail"
                          className="ml-2 text-gray-300"
                        >
                          Show email on profile
                        </label>
                      </div>
                    </div>
                  </div>
                  
                  {/* Linked Accounts */}
                  <div className="bg-gray-800 rounded-lg p-4">
                    <h3 className="text-lg font-medium text-white mb-3">Linked Accounts</h3>
                    
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center mr-3">
                            <i className="fab fa-discord text-white"></i>
                          </div>
                          <span className="text-gray-300">Discord</span>
                        </div>
                        <button className="text-cyan-400 hover:text-cyan-300">Connect</button>
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className="w-8 h-8 bg-blue-800 rounded-full flex items-center justify-center mr-3">
                            <i className="fab fa-steam text-white"></i>
                          </div>
                          <span className="text-gray-300">Steam</span>
                        </div>
                        <button className="text-cyan-400 hover:text-cyan-300">Connect</button>
                      </div>
                      
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          <div className="w-8 h-8 bg-green-700 rounded-full flex items-center justify-center mr-3">
                            <i className="fab fa-xbox text-white"></i>
                          </div>
                          <span className="text-gray-300">Xbox</span>
                        </div>
                        <button className="text-cyan-400 hover:text-cyan-300">Connect</button>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="pt-4 flex justify-end">
                  <button
                    onClick={handleProfileUpdate}
                    disabled={loading}
                    className="px-4 py-2 bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 text-white rounded-lg transition-colors"
                  >
                    {loading ? "Saving..." : "Save Settings"}
                  </button>
                </div>
              </div>
            )}
            
            {/* Profile Tab */}
            {activeTab === "profile" && (
              <>
                {isEditing ? (
                  <form onSubmit={handleProfileUpdate}>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-gray-300 mb-2">
                          Username
                        </label>
                        <input
                          type="text"
                          value={newUsername}
                          onChange={(e) => setNewUsername(e.target.value)}
                          className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-cyan-500"
                          required
                        />
                      </div>

                      <div>
                        <label className="block text-gray-300 mb-2">Bio</label>
                        <textarea
                          value={bio}
                          onChange={(e) => setBio(e.target.value)}
                          className="w-full bg-gray-700 border border-gray-600 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-cyan-500 h-32"
                          placeholder="Tell us about yourself..."
                        />
                      </div>

                      <div>
                        <label className="block text-gray-300 mb-2">
                          Profile Image
                        </label>
                        <div className="flex items-center space-x-4">
                          <div className="w-24 h-24 rounded-full bg-gray-800 overflow-hidden border border-gray-700">
                            {imageUrl ? (
                              <img
                                src={imageUrl}
                                alt="Profile preview"
                                className="w-full h-full object-cover"
                              />
                            ) : (
                              <div className="w-full h-full flex items-center justify-center text-3xl font-bold text-gray-500 bg-gradient-to-br from-cyan-500/20 to-purple-600/20">
                                {newUsername.charAt(0) || "U"}
                              </div>
                            )}
                          </div>
                          <div>
                            <label className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg cursor-pointer transition-colors">
                              Choose Image
                              <input
                                type="file"
                                accept="image/*"
                                onChange={handleImageChange}
                                className="hidden"
                              />
                            </label>
                          </div>
                        </div>
                      </div>

                      <div className="flex items-center">
                        <input
                          type="checkbox"
                          id="showEmail"
                          checked={showEmail}
                          onChange={(e) => setShowEmail(e.target.checked)}
                          className="w-4 h-4 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
                        />
                        <label
                          htmlFor="showEmail"
                          className="ml-2 text-gray-300"
                        >
                          Show email on profile
                        </label>
                      </div>

                      <div className="pt-4 flex justify-end space-x-3">
                        <button
                          type="button"
                          onClick={() => setIsEditing(false)}
                          className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                        >
                          Cancel
                        </button>
                        <button
                          type="submit"
                          disabled={loading}
                          className="px-4 py-2 bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 text-white rounded-lg transition-colors"
                        >
                          {loading ? "Saving..." : "Save Changes"}
                        </button>
                      </div>
                    </div>
                  </form>
                ) : (
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium text-gray-300 mb-2">
                        About Me
                      </h3>
                      <p className="text-gray-400">
                        {bio || "No bio provided yet."}
                      </p>
                    </div>

                    {showEmail && currentUser?.email && (
                      <div>
                        <h3 className="text-lg font-medium text-gray-300 mb-2">
                          Email
                        </h3>
                        <p className="text-gray-400">{currentUser.email}</p>
                      </div>
                    )}

                    <div className="pt-4">
                      <button
                        onClick={() => setIsEditing(true)}
                        className="px-4 py-2 bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 text-white rounded-lg transition-colors"
                      >
                        Edit Profile
                      </button>
                    </div>
                  </div>
                )}
              </>
            )}

            {/* Gaming Preferences Tab */}
            {activeTab === "gaming" && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-white mb-4">
                  Gaming Preferences
                </h2>

                <div>
                  <label className="block text-gray-300 mb-2">
                    Favorite Game Genres
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                    {[
                      "RPG",
                      "FPS",
                      "MOBA",
                      "MMO",
                      "Battle Royale",
                      "Strategy",
                      "Sandbox",
                      "Sports",
                      "Racing",
                      "Simulation",
                    ].map((genre) => (
                      <div key={genre} className="flex items-center">
                        <input
                          type="checkbox"
                          id={`genre-${genre}`}
                          checked={favoriteGenres.includes(genre)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setFavoriteGenres([...favoriteGenres, genre]);
                            } else {
                              setFavoriteGenres(
                                favoriteGenres.filter((g) => g !== genre)
                              );
                            }
                          }}
                          className="w-4 h-4 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
                        />
                        <label
                          htmlFor={`genre-${genre}`}
                          className="ml-2 text-gray-300"
                        >
                          {genre}
                        </label>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="pt-4 flex justify-end">
                  <button
                    onClick={handleProfileUpdate}
                    disabled={loading}
                    className="px-4 py-2 bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 text-white rounded-lg transition-colors"
                  >
                    {loading ? "Saving..." : "Save Preferences"}
                  </button>
                </div>
              </div>
            )}

            {/* Notifications Tab */}
            {activeTab === "notifications" && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-white mb-4">
                  Notification Settings
                </h2>

                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">
                        Direct Messages
                      </h3>
                      <p className="text-sm text-gray-400">
                        Get notified when you receive a message
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={notificationSettings.messages}
                        onChange={(e) =>
                          setNotificationSettings({
                            ...notificationSettings,
                            messages: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">
                        Friend Requests
                      </h3>
                      <p className="text-sm text-gray-400">
                        Get notified about new friend requests
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={notificationSettings.friendRequests}
                        onChange={(e) =>
                          setNotificationSettings({
                            ...notificationSettings,
                            friendRequests: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">Game Invites</h3>
                      <p className="text-sm text-gray-400">
                        Get notified when someone invites you to play
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={notificationSettings.gameInvites}
                        onChange={(e) =>
                          setNotificationSettings({
                            ...notificationSettings,
                            gameInvites: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">News & Updates</h3>
                      <p className="text-sm text-gray-400">
                        Receive news about game updates and events
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={notificationSettings.newsAndUpdates}
                        onChange={(e) =>
                          setNotificationSettings({
                            ...notificationSettings,
                            newsAndUpdates: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>
                </div>

                <div className="pt-4 flex justify-end">
                  <button
                    onClick={handleProfileUpdate}
                    disabled={loading}
                    className="px-4 py-2 bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 text-white rounded-lg transition-colors"
                  >
                    {loading ? "Saving..." : "Save Notification Settings"}
                  </button>
                </div>
              </div>
            )}

            {/* Privacy Tab */}
            {activeTab === "privacy" && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-white mb-4">
                  Privacy Settings
                </h2>

                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">
                        Show Online Status
                      </h3>
                      <p className="text-sm text-gray-400">
                        Let others see when you're online
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={privacySettings.showOnlineStatus}
                        onChange={(e) =>
                          setPrivacySettings({
                            ...privacySettings,
                            showOnlineStatus: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">
                        Show Current Game
                      </h3>
                      <p className="text-sm text-gray-400">
                        Let others see what game you're playing
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={privacySettings.showCurrentGame}
                        onChange={(e) =>
                          setPrivacySettings({
                            ...privacySettings,
                            showCurrentGame: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">
                        Allow Friend Requests
                      </h3>
                      <p className="text-sm text-gray-400">
                        Let other users send you friend requests
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={privacySettings.allowFriendRequests}
                        onChange={(e) =>
                          setPrivacySettings({
                            ...privacySettings,
                            allowFriendRequests: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
                    <div>
                      <h3 className="font-medium text-white">
                        Show Game Activity
                      </h3>
                      <p className="text-sm text-gray-400">
                        Share your achievements and game stats
                      </p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={privacySettings.showGameActivity}
                        onChange={(e) =>
                          setPrivacySettings({
                            ...privacySettings,
                            showGameActivity: e.target.checked,
                          })
                        }
                      />
                      <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-cyan-500 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-600"></div>
                    </label>
                  </div>
                </div>

                <div className="pt-4 flex justify-end">
                  <button
                    onClick={handleProfileUpdate}
                    disabled={loading}
                    className="px-4 py-2 bg-gradient-to-r from-cyan-600 to-purple-600 hover:from-cyan-700 hover:to-purple-700 text-white rounded-lg transition-colors"
                  >
                    {loading ? "Saving..." : "Save Privacy Settings"}
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </MainLayout>
  );
}
